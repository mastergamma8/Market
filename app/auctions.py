import asyncio
import datetime
import hashlib
from urllib.parse import quote_plus
from copy import deepcopy

from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

from fastapi import APIRouter, Request, Form
from fastapi.responses import RedirectResponse

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤
from common import load_data, save_data, ensure_user, templates, bot
from common import dp

router = APIRouter()

ADMIN_ID = "1809630966"

#############################
# –¢–µ–ª–µ–≥—Ä–∞–º‚Äë–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
#############################

@dp.message(Command("auction"))
async def create_auction(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.
    –§–æ—Ä–º–∞—Ç: /auction <–Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞> <–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)>
    –ü—Ä–∏–º–µ—Ä: /auction 2 500 10
    """
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /auction <–Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞> <–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)>")
        return
    try:
        token_index = int(parts[1]) - 1
        starting_price = int(parts[2])
        duration_minutes = int(parts[3])
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞, –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî —á–∏—Å–ª–∞.")
        return

    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if token_index < 0 or token_index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return

    token = tokens.pop(token_index)
    auction_id = hashlib.sha256(
        (str(message.from_user.id) + token["token"] + str(datetime.datetime.now())).encode()
    ).hexdigest()[:8]
    end_time = (datetime.datetime.now() + datetime.timedelta(minutes=duration_minutes)).timestamp()

    auction = {
        "auction_id": auction_id,
        "seller_id": str(message.from_user.id),
        "token": token,
        "starting_price": starting_price,
        "current_bid": starting_price,
        "highest_bidder": None,
        "end_time": end_time
    }
    if "auctions" not in data:
        data["auctions"] = []
    data["auctions"].append(auction)
    save_data(data)
    await message.answer(
        f"üöÄ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!\nID –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_id}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {starting_price} üíé\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {datetime.datetime.fromtimestamp(end_time).strftime('%Y-%m-%d %H:%M:%S')}"
    )


@dp.message(Command("bid"))
async def bid_on_auction(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.
    –§–æ—Ä–º–∞—Ç: /bid <auction_id> <—Å—Ç–∞–≤–∫–∞>
    –ü—Ä–∏–º–µ—Ä: /bid a1b2c3d4 750
    """
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /bid <auction_id> <—Å—Ç–∞–≤–∫–∞>")
        return
    auction_id = parts[1]
    try:
        bid_amount = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    data = load_data()
    auctions = data.get("auctions", [])
    auction = next((a for a in auctions if a["auction_id"] == auction_id), None)
    if auction is None:
        await message.answer("‚ùó –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_time = datetime.datetime.now().timestamp()
    if current_time > auction["end_time"]:
        await message.answer("‚ùó –ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return

    if bid_amount <= auction["current_bid"]:
        await message.answer("‚ùó –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.")
        return

    bidder = ensure_user(data, str(message.from_user.id))
    if bidder.get("balance", 0) < bid_amount:
        await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    # –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–≤—ã—à–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É
    if auction.get("highest_bidder") == str(message.from_user.id):
        additional_required = bid_amount - auction["current_bid"]
        if additional_required <= 0:
            await message.answer("‚ùó –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.")
            return
        if bidder.get("balance", 0) < additional_required:
            await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.")
            return
        bidder["balance"] -= additional_required
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∞–¥–º–∏–Ω—É
        admin = ensure_user(data, ADMIN_ID)
        admin["balance"] += additional_required
    else:
        if bidder.get("balance", 0) < bid_amount:
            await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
            return
        # –ï—Å–ª–∏ –±—ã–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª–∏–¥–µ—Ä, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if auction.get("highest_bidder"):
            admin = ensure_user(data, ADMIN_ID)
            admin["balance"] += auction["current_bid"]
        bidder["balance"] -= bid_amount
        auction["highest_bidder"] = str(message.from_user.id)
    auction["current_bid"] = bid_amount
    save_data(data)
    await message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bid_amount} üíé –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ {auction_id} –ø—Ä–∏–Ω—è—Ç–∞!")


##########################################
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤
##########################################

async def check_auctions():
    while True:
        data = load_data()
        if "auctions" in data:
            auctions = data["auctions"]
            current_time = datetime.datetime.now().timestamp()
            ended_auctions = [a for a in auctions if current_time > a["end_time"]]
            for auction in ended_auctions:
                seller_id = auction["seller_id"]
                highest_bidder = auction["highest_bidder"]
                final_price = auction["current_bid"]
                token = auction["token"]
                seller = ensure_user(data, seller_id)
                if highest_bidder is not None:
                    buyer = ensure_user(data, highest_bidder)
                    seller["balance"] += final_price
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ —Ç–æ–∫–µ–Ω–µ:
                    new_token = deepcopy(token)
                    new_token["bought_price"] = final_price
                    new_token["bought_date"] = datetime.datetime.now().isoformat()
                    new_token["bought_source"] = "auction"
                    buyer.setdefault("tokens", []).append(new_token)
                    try:
                        await bot.send_message(
                            int(highest_bidder),
                            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω {auction['auction_id']} –∑–∞ {final_price} üíé. –¢–æ–∫–µ–Ω –∑–∞—á–∏—Å–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é."
                        )
                    except Exception as e:
                        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", e)
                else:
                    seller.setdefault("tokens", []).append(token)
                    try:
                        await bot.send_message(
                            int(seller_id),
                            f"–í–∞—à –∞—É–∫—Ü–∏–æ–Ω {auction['auction_id']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Å—Ç–∞–≤–æ–∫. –¢–æ–∫–µ–Ω –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤–∞–º."
                        )
                    except Exception as e:
                        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:", e)
                auctions.remove(auction)
            save_data(data)
        await asyncio.sleep(30)


##########################################
# –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–æ–≤ (FastAPI)
##########################################

@router.get("/auctions", response_class=RedirectResponse)
async def auctions_page(request: Request):
    data = load_data()
    auctions = data.get("auctions", [])
    return templates.TemplateResponse("auctions.html", {
        "request": request,
        "auctions": auctions,
        "users": data.get("users", {}),
        "buyer_id": request.cookies.get("user_id")
    })


@router.post("/bid_web")
async def bid_web(request: Request, auction_id: str = Form(...), bid_amount: int = Form(...)):
    buyer_id = request.cookies.get("user_id")
    if not buyer_id:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')}", status_code=303)
    
    data = load_data()
    auctions = data.get("auctions", [])
    auction = next((a for a in auctions if a["auction_id"] == auction_id), None)
    if auction is None:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')}", status_code=303)
    
    current_time = datetime.datetime.now().timestamp()
    if current_time > auction["end_time"]:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.')}", status_code=303)
    
    if bid_amount <= auction["current_bid"]:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.')}", status_code=303)
    
    buyer = ensure_user(data, buyer_id)
    # –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–≤—ã—à–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞–≤–∫—É
    if auction.get("highest_bidder") == buyer_id:
        additional_required = bid_amount - auction["current_bid"]
        if additional_required <= 0:
            return RedirectResponse(url=f"/auctions?error={quote_plus('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π.')}", status_code=303)
        if buyer.get("balance", 0) < additional_required:
            return RedirectResponse(url=f"/auctions?error={quote_plus('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')}", status_code=303)
        buyer["balance"] -= additional_required
        admin = ensure_user(data, ADMIN_ID)
        admin["balance"] += additional_required
    else:
        if buyer.get("balance", 0) < bid_amount:
            return RedirectResponse(url=f"/auctions?error={quote_plus('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')}", status_code=303)
        # –ï—Å–ª–∏ –±—ã–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª–∏–¥–µ—Ä, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ —Å—Ç–∞–≤–∫—É –Ω–∞ —Å—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if auction.get("highest_bidder"):
            admin = ensure_user(data, ADMIN_ID)
            admin["balance"] += auction["current_bid"]
        buyer["balance"] -= bid_amount
        auction["highest_bidder"] = buyer_id
    auction["current_bid"] = bid_amount
    save_data(data)
    return RedirectResponse(url="/auctions", status_code=303)


@router.post("/auction_create")
async def create_auction_web(request: Request,
                             token_index: int = Form(...),
                             starting_price: int = Form(...),
                             duration_minutes: int = Form(...)):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±‚Äë—Ñ–æ—Ä–º—É (–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ).
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')}", status_code=303)
    
    try:
        token_index = int(token_index) - 1  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞—è —Å 1
        starting_price = int(starting_price)
        duration_minutes = int(duration_minutes)
    except ValueError:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')}", status_code=303)
    
    data = load_data()
    user = ensure_user(data, user_id)
    tokens = user.get("tokens", [])
    if token_index < 0 or token_index >= len(tokens):
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞.')}", status_code=303)
    
    token = tokens.pop(token_index)
    auction_id = hashlib.sha256((user_id + token["token"] + str(datetime.datetime.now())).encode()).hexdigest()[:8]
    end_time = (datetime.datetime.now() + datetime.timedelta(minutes=duration_minutes)).timestamp()
    
    auction = {
        "auction_id": auction_id,
        "seller_id": user_id,
        "token": token,
        "starting_price": starting_price,
        "current_bid": starting_price,
        "highest_bidder": None,
        "end_time": end_time
    }
    if "auctions" not in data:
        data["auctions"] = []
    data["auctions"].append(auction)
    save_data(data)
    return RedirectResponse(url="/auctions", status_code=303)


@router.post("/finish_auction")
async def finish_auction(request: Request, auction_id: str = Form(...)):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.')}", status_code=303)
    
    data = load_data()
    auctions = data.get("auctions", [])
    auction = next((a for a in auctions if a["auction_id"] == auction_id), None)
    if auction is None:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.')}", status_code=303)
    
    if auction["seller_id"] != user_id:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω.')}", status_code=303)
    
    current_time = datetime.datetime.now().timestamp()
    if current_time > auction["end_time"]:
        return RedirectResponse(url=f"/auctions?error={quote_plus('–û—à–∏–±–∫–∞: –ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.')}", status_code=303)
    
    auction["end_time"] = current_time
    seller_id = auction["seller_id"]
    highest_bidder = auction["highest_bidder"]
    final_price = auction["current_bid"]
    token = auction["token"]
    seller = ensure_user(data, seller_id)
    if highest_bidder is not None:
        buyer = ensure_user(data, highest_bidder)
        seller["balance"] += final_price
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ:
        new_token = deepcopy(token)
        new_token["bought_price"] = final_price
        new_token["bought_date"] = datetime.datetime.now().isoformat()
        new_token["bought_source"] = "auction"
        buyer.setdefault("tokens", []).append(new_token)
        try:
            await bot.send_message(
                int(highest_bidder),
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω {auction_id} –∑–∞ {final_price} üíé. –¢–æ–∫–µ–Ω –∑–∞—á–∏—Å–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é."
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", e)
    else:
        seller.setdefault("tokens", []).append(token)
        try:
            await bot.send_message(
                int(seller_id),
                f"–í–∞—à –∞—É–∫—Ü–∏–æ–Ω {auction_id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —Å—Ç–∞–≤–æ–∫. –¢–æ–∫–µ–Ω –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤–∞–º."
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:", e)
    
    auctions.remove(auction)
    save_data(data)
    return RedirectResponse(url="/auctions", status_code=303)


##########################################
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
##########################################

def register_auction_tasks(loop):
    loop.create_task(check_auctions())
