import datetime
import uuid
from fastapi import APIRouter, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ common.py
from common import load_data, save_data, ensure_user, templates, bot

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = APIRouter()

@router.get("/exchange", response_class=HTMLResponse)
async def web_exchange_form(request: Request):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –æ–±–º–µ–Ω–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ exchange.html).
    """
    return templates.TemplateResponse("exchange.html", {"request": request})

@router.post("/exchange", response_class=HTMLResponse)
async def web_exchange_post(request: Request,
                            user_id: str = Form(None),
                            my_index: int = Form(...),
                            target_id: str = Form(...),
                            target_index: int = Form(...)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –æ–±–º–µ–Ω–∞.
    """
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    initiator = data.get("users", {}).get(user_id)
    target = data.get("users", {}).get(target_id)
    if not initiator or not target:
        return HTMLResponse("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens) or target_index < 1 or target_index > len(target_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", status_code=400)
    my_token = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)
    exchange_id = str(uuid.uuid4())
    pending_exchange = {
        "exchange_id": exchange_id,
        "initiator_id": user_id,
        "target_id": target_id,
        "initiator_token": my_token,
        "target_token": target_token,
        "timestamp": datetime.datetime.now().isoformat(),
        "expires_at": (datetime.datetime.now() + datetime.timedelta(hours=24)).timestamp()
    }
    if "pending_exchanges" not in data:
        data["pending_exchanges"] = []
    data["pending_exchanges"].append(pending_exchange)
    save_data(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –æ–±–º–µ–Ω–∞ (–¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_exchange:{exchange_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_exchange:{exchange_id}")]
    ])
    try:
        await bot.send_message(
            int(target_id),
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω:\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä: {target_token['token']}\n"
            f"–Ω–∞ –µ–≥–æ –Ω–æ–º–µ—Ä: {my_token['token']}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª –¥–ª—è –æ—Ç–∫–∞–∑–∞.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ /cancel_exchange <ID –æ–±–º–µ–Ω–∞>.",
            reply_markup=keyboard
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞:", e)
    return templates.TemplateResponse("exchange_pending.html", {
        "request": request,
        "message": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.",
        "exchange_id": exchange_id,
        "expires_at": datetime.datetime.fromtimestamp(pending_exchange["expires_at"]).strftime("%Y-%m-%d %H:%M:%S")
    })

@router.get("/accept_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def accept_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id != pending["target_id"]:
        return HTMLResponse("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", status_code=403)
    now_ts = datetime.datetime.now().timestamp()
    if now_ts > pending.get("expires_at", 0):
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ.", status_code=400)
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    initiator.setdefault("tokens", []).append(pending["target_token"])
    target.setdefault("tokens", []).append(pending["initiator_token"])
    data["pending_exchanges"].remove(pending)
    save_data(data)
    return HTMLResponse(f"–û–±–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä. <a href='/profile/{user_id}'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å</a>")

@router.get("/decline_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def decline_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id != pending["target_id"]:
        return HTMLResponse("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", status_code=403)
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    data["pending_exchanges"].remove(pending)
    save_data(data)
    return HTMLResponse(f"–û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω. <a href='/profile/{user_id}'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å</a>")

@router.get("/cancel_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def cancel_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id not in [pending["initiator_id"], pending["target_id"]]:
        return HTMLResponse("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –æ–±–º–µ–Ω–µ.", status_code=403)
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    data["pending_exchanges"].remove(pending)
    save_data(data)
    return HTMLResponse(f"–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é. <a href='/profile/{user_id}'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å</a>")
