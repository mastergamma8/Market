import datetime
import uuid
from fastapi import APIRouter, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse

# –ï—Å–ª–∏ –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å common.py:
from common import load_data, save_data, ensure_user, templates, bot

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = APIRouter()

@router.get("/exchange", response_class=HTMLResponse)
async def web_exchange_form(request: Request):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    user_exchanges = [ex for ex in pending_exchanges if ex["initiator_id"] == user_id or ex["target_id"] == user_id]
    return templates.TemplateResponse("exchange.html", {
        "request": request,
        "pending_exchanges": user_exchanges,
        "current_user_id": user_id
    })
    
@router.post("/exchange", response_class=HTMLResponse)
async def web_exchange_post(request: Request,
                            user_id: str = Form(None),
                            my_index: int = Form(...),
                            target_id: str = Form(...),
                            target_index: int = Form(...)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –æ–±–º–µ–Ω–∞.
    """
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    data = load_data()
    initiator = data.get("users", {}).get(user_id)
    target = data.get("users", {}).get(target_id)
    if not initiator or not target:
        return HTMLResponse("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens) or target_index < 1 or target_index > len(target_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", status_code=400)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ —Å–ø–∏—Å–∫–∞
    my_token = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)
    
    exchange_id = str(uuid.uuid4())
    pending_exchange = {
        "exchange_id": exchange_id,
        "initiator_id": user_id,
        "target_id": target_id,
        "initiator_token": my_token,
        "target_token": target_token,
        "timestamp": datetime.datetime.now().isoformat(),
        "expires_at": (datetime.datetime.now() + datetime.timedelta(hours=24)).timestamp()
    }
    if "pending_exchanges" not in data:
        data["pending_exchanges"] = []
    data["pending_exchanges"].append(pending_exchange)
    save_data(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –æ–±–º–µ–Ω–∞ (–¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_exchange:{exchange_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_exchange:{exchange_id}")]
    ])
    try:
        await bot.send_message(
            int(target_id),
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω:\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä: {target_token['token']}\n"
            f"–Ω–∞ –µ–≥–æ –Ω–æ–º–µ—Ä: {my_token['token']}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª –¥–ª—è –æ—Ç–∫–∞–∑–∞.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ /cancel_exchange <ID –æ–±–º–µ–Ω–∞>.",
            reply_markup=keyboard
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞:", e)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ–±–º–µ–Ω–µ
    return templates.TemplateResponse("exchange_pending.html", {
        "request": request,
        "message": f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –í–∞—à ID –æ–±–º–µ–Ω–∞: {exchange_id}",
        "exchange_id": exchange_id,
        "expires_at": datetime.datetime.fromtimestamp(pending_exchange["expires_at"]).strftime("%Y-%m-%d %H:%M:%S")
    })

@router.get("/accept_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def accept_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id != pending["target_id"]:
        return HTMLResponse("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", status_code=403)
    
    now_ts = datetime.datetime.now().timestamp()
    if now_ts > pending.get("expires_at", 0):
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ.", status_code=400)
    
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–º–µ–Ω: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    initiator.setdefault("tokens", []).append(pending["target_token"])
    target.setdefault("tokens", []).append(pending["initiator_token"])
    
    data["pending_exchanges"].remove(pending)
    save_data(data)
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å flash‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ)
    return RedirectResponse(url="/active_deals?message=–û–±–º–µ–Ω+–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", status_code=302)
    
@router.get("/decline_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def decline_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id != pending["target_id"]:
        return HTMLResponse("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.", status_code=403)
    
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    
    data["pending_exchanges"].remove(pending)
    save_data(data)
    
    return templates.TemplateResponse("exchange_result_modal.html", {
        "request": request,
        "title": "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω",
        "message": "–û–±–º–µ–Ω –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
        "image_url": "/static/image/declined.png"
    })

@router.get("/cancel_exchange_web/{exchange_id}", response_class=HTMLResponse)
async def cancel_exchange_web(request: Request, exchange_id: str):
    """
    –í–µ–±‚Äë—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞.
    –ó–¥–µ—Å—å –æ–±–º–µ–Ω –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, —Ç–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º, –∏ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ.
    """
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    data = load_data()
    pending = next((ex for ex in data.get("pending_exchanges", []) if ex["exchange_id"] == exchange_id), None)
    if not pending:
        return HTMLResponse("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.", status_code=404)
    if user_id not in [pending["initiator_id"], pending["target_id"]]:
        return HTMLResponse("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –æ–±–º–µ–Ω–µ.", status_code=403)
    
    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    
    data["pending_exchanges"].remove(pending)
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    try:
        await bot.send_message(
            int(pending["initiator_id"]),
            f"–û–±–º–µ–Ω —Å ID {exchange_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É:", e)
    
    try:
        await bot.send_message(
            int(pending["target_id"]),
            f"–û–±–º–µ–Ω —Å ID {exchange_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é:", e)
    
    return templates.TemplateResponse("exchange_result_modal.html", {
        "request": request,
        "title": "–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω",
        "message": "–û–±–º–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é.",
        "image_url": "/static/image/declined.png"
    })
    
@router.get("/active_deals", response_class=HTMLResponse)
async def active_deals(request: Request):
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
    user_exchanges = [ex for ex in pending_exchanges if ex["initiator_id"] == user_id or ex["target_id"] == user_id]
    return templates.TemplateResponse("active_deals.html", {
        "request": request,
        "pending_exchanges": user_exchanges
    })
