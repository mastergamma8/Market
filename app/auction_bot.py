from aiogram import Dispatcher, types
from aiogram.filters import Command
from auction import auction_instance  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—É–∫—Ü–∏–æ–Ω–∞
# from common import ADMIN_IDS  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

dp: Dispatcher  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

@dp.message(Command("startauction"))
async def bot_start_auction(message: types.Message):
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–æ ‚Äì —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω.
    # (–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.)
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /startauction <–Ω–æ–º–µ—Ä —Ç–æ–∫–µ–Ω–∞> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö>")
        return

    token = parts[1]
    try:
        duration = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (—Å–µ–∫—É–Ω–¥—ã).")
        return

    try:
        await auction_instance.start_auction(token, duration)
        await message.answer(f"üöÄ –ê—É–∫—Ü–∏–æ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token} –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {e}")

@dp.message(Command("bid"))
async def bot_place_bid(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /bid <—Å—Ç–∞–≤–∫–∞>")
        return

    try:
        bid_amount = int(parts[1])
    except ValueError:
        await message.answer("‚ùó –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (full_name)
        success = await auction_instance.place_bid(str(message.from_user.id), message.from_user.full_name, bid_amount)
        if success:
            await message.answer(
                f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bid_amount} –ø—Ä–∏–Ω—è—Ç–∞.\n"
                f"–¢–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {auction_instance.highest_bid} –æ—Ç {auction_instance.highest_bidder_name}"
            )
        else:
            await message.answer(
                f"‚ùó –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π: {auction_instance.highest_bid}"
            )
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏: {e}")

@dp.message(Command("auctionstatus"))
async def bot_auction_status(message: types.Message):
    if auction_instance.active:
        time_remaining = auction_instance.get_time_remaining()
        await message.answer(
            f"üì¢ –ê—É–∫—Ü–∏–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {auction_instance.token}.\n"
            f"–¢–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {auction_instance.highest_bid} –æ—Ç {auction_instance.highest_bidder_name}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_remaining} —Å–µ–∫—É–Ω–¥"
        )
    else:
        await message.answer("‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞—É–∫—Ü–∏–æ–Ω –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.")
