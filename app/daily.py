import datetime
import random
import asyncio

from common import load_data, save_data, ensure_user, bot, dp
from aiogram.filters import Command
from aiogram.types import Message
from fastapi import APIRouter, Request, Form, Body
from fastapi.responses import HTMLResponse, RedirectResponse

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤–µ–±-—á–∞—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
router = APIRouter()

# =========================
# –ë–û–¢: –ö–æ–º–∞–Ω–¥–∞ /daily
# =========================

@dp.message(Command("daily"))
async def daily_reward_bot(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily –¥–ª—è –±–æ—Ç–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è, –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 25 –∞–ª–º–∞–∑–æ–≤.
    –ü—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –≤—Ö–æ–¥–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫; –µ—Å–ª–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ ‚Äì —Å–±—Ä–æ—Å.
    """
    data = load_data()
    user_id = str(message.from_user.id)
    user = ensure_user(data, user_id, message.from_user.username or message.from_user.first_name)
    
    today = datetime.date.today()
    last_reward_str = user.get("last_daily_reward")
    consecutive = user.get("consecutive_daily_logins", 0)
    
    if last_reward_str:
        last_reward_date = datetime.date.fromisoformat(last_reward_str)
        if last_reward_date == today:
            await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!")
            return
        elif last_reward_date == today - datetime.timedelta(days=1):
            consecutive += 1
        else:
            consecutive = 1
    else:
        consecutive = 1

    reward_amount = 25
    user["balance"] = user.get("balance", 0) + reward_amount
    user["last_daily_reward"] = today.isoformat()
    
    if consecutive >= 7:
        user["consecutive_daily_logins"] = 0
        msg = (f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ 7 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward_amount} üíé!\n"
               "–í–∞—à —Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –∏ —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    else:
        user["consecutive_daily_logins"] = consecutive
        msg = (f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward_amount} üíé.\n"
               f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –≤—Ö–æ–¥–∞: {consecutive}.")

    save_data(data)
    await message.answer(msg)

# =========================
# –í–ï–ë: –≠–Ω–¥–ø–æ–∏–Ω—Ç /daily
# =========================

@router.post("/daily", response_class=HTMLResponse)
async def daily_reward_web(request: Request):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è, –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 25 –∞–ª–º–∞–∑–æ–≤.
    """
    data = load_data()
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    
    today = datetime.date.today()
    last_reward_str = user.get("last_daily_reward")
    consecutive = user.get("consecutive_daily_logins", 0)
    
    if last_reward_str:
        last_reward_date = datetime.date.fromisoformat(last_reward_str)
        if last_reward_date == today:
            # –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            return RedirectResponse(url=f"/profile/{user_id}?msg=reward_already", status_code=303)
        elif last_reward_date == today - datetime.timedelta(days=1):
            consecutive += 1
        else:
            consecutive = 1
    else:
        consecutive = 1

    reward_amount = 25
    user["balance"] = user.get("balance", 0) + reward_amount
    user["last_daily_reward"] = today.isoformat()
    
    if consecutive >= 7:
        user["consecutive_daily_logins"] = 0
    else:
        user["consecutive_daily_logins"] = consecutive
    
    save_data(data)
    return RedirectResponse(url=f"/profile/{user_id}?msg=daily_success", status_code=303)

# =========================
# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# =========================

if __name__ == "__main__":
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å daily.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±, —Å–æ–∑–¥–∞–π—Ç–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    import uvicorn
    from fastapi import FastAPI
    app = FastAPI()
    app.include_router(router)
    uvicorn.run(app, host="0.0.0.0", port=8001)
