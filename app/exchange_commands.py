import datetime
import uuid
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ common.py
from common import bot, dp, load_data, save_data, ensure_user

@dp.message(Command("exchange"))
async def exchange_numbers(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    –§–æ—Ä–º–∞—Ç: /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä>
    """
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä>")
        return
    try:
        my_index = int(parts[1]) - 1
        target_uid = parts[2]
        target_index = int(parts[3]) - 1
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –∏ ID —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏.")
        return

    data = load_data()
    initiator = ensure_user(data, str(message.from_user.id))
    if target_uid == str(message.from_user.id):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    target = data.get("users", {}).get(target_uid)
    if not target:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 0 or my_index >= len(my_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    if target_index < 0 or target_index >= len(target_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–±–ª–æ–∫–∏—Ä—É–µ–º –∏—Ö)
    my_token = my_tokens.pop(my_index)
    target_token = target_tokens.pop(target_index)
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if initiator.get("custom_number") and initiator["custom_number"].get("token") == my_token["token"]:
        del initiator["custom_number"]
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Ü–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if target.get("custom_number") and target["custom_number"].get("token") == target_token["token"]:
        del target["custom_number"]
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ pending-–æ–±–º–µ–Ω–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 24 —á–∞—Å–∞
    exchange_id = str(uuid.uuid4())
    pending_exchange = {
        "exchange_id": exchange_id,
        "initiator_id": str(message.from_user.id),
        "target_id": target_uid,
        "initiator_token": my_token,
        "target_token": target_token,
        "timestamp": datetime.datetime.now().isoformat(),
        "expires_at": (datetime.datetime.now() + datetime.timedelta(hours=24)).timestamp()
    }
    if "pending_exchanges" not in data:
        data["pending_exchanges"] = []
    data["pending_exchanges"].append(pending_exchange)
    save_data(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–∞–∑–∞ –æ–±–º–µ–Ω–∞ (–¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_exchange:{exchange_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_exchange:{exchange_id}")]
    ])

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            int(target_uid),
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω:\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä: {target_token['token']}\n"
            f"–Ω–∞ –µ–≥–æ –Ω–æ–º–µ—Ä: {my_token['token']}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª –¥–ª—è –æ—Ç–∫–∞–∑–∞.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ /cancel_exchange <ID –æ–±–º–µ–Ω–∞>.",
            reply_markup=keyboard
        )
    except Exception as e:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ
        my_tokens.append(my_token)
        target_tokens.append(target_token)
        data["pending_exchanges"].remove(pending_exchange)
        save_data(data)
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –î–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞
    initiator_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data=f"cancel_exchange_initiator:{exchange_id}")]
    ])
    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID –æ–±–º–µ–Ω–∞: {exchange_id}\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.",
        reply_markup=initiator_keyboard
    )

@dp.callback_query(lambda c: c.data and c.data.startswith("accept_exchange:"))
async def process_accept_exchange(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞.
    """
    exchange_id = callback.data.split(":", 1)[1]
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    pending = next((ex for ex in pending_exchanges if ex["exchange_id"] == exchange_id), None)
    if not pending:
        await callback.answer("‚ùó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        return
    if str(callback.from_user.id) != pending["target_id"]:
        await callback.answer("‚ùó –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞.")
        return
    now_ts = datetime.datetime.now().timestamp()
    if now_ts > pending.get("expires_at", 0):
        await callback.answer("‚ùó –°—Ä–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç—ë–∫.")
        return

    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–º–µ–Ω: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω —Ü–µ–ª–∏, –∞ —Ü–µ–ª—å ‚Äì —Ç–æ–∫–µ–Ω –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    initiator.setdefault("tokens", []).append(pending["target_token"])
    target.setdefault("tokens", []).append(pending["initiator_token"])
    data["pending_exchanges"].remove(pending)
    save_data(data)

    await callback.answer("‚úÖ –û–±–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
    try:
        await bot.send_message(
            int(pending["initiator_id"]),
            f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞!\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä: {pending['target_token']['token']}"
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:", e)
    await callback.message.edit_text("‚úÖ –û–±–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

@dp.callback_query(lambda c: c.data and c.data.startswith("decline_exchange:"))
async def process_decline_exchange(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –æ—Ç–∫–∞–∑–∞ –æ–±–º–µ–Ω–∞.
    –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.
    """
    exchange_id = callback.data.split(":", 1)[1]
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    pending = next((ex for ex in pending_exchanges if ex["exchange_id"] == exchange_id), None)
    if not pending:
        await callback.answer("‚ùó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        return
    if str(callback.from_user.id) != pending["target_id"]:
        await callback.answer("‚ùó –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞.")
        return

    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    data["pending_exchanges"].remove(pending)
    save_data(data)

    await callback.answer("‚ùå –û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    try:
        await bot.send_message(
            int(pending["initiator_id"]),
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:", e)
    await callback.message.edit_text("‚ùå –û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.callback_query(lambda c: c.data and c.data.startswith("cancel_exchange_initiator:"))
async def process_cancel_exchange_initiator(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º.
    –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    """
    exchange_id = callback.data.split(":", 1)[1]
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    pending = next((ex for ex in pending_exchanges if ex["exchange_id"] == exchange_id), None)
    if not pending:
        await callback.answer("‚ùó –û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    if str(callback.from_user.id) != pending["initiator_id"]:
        await callback.answer("‚ùó –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ–±–º–µ–Ω.")
        return

    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    pending_exchanges.remove(pending)
    save_data(data)

    await callback.answer("‚úÖ –û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")
    try:
        await bot.send_message(
            int(pending["target_id"]),
            "‚ÑπÔ∏è –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞:", e)
    await callback.message.edit_text("‚úÖ –û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω.")

@dp.message(Command("cancel_exchange"))
async def cancel_exchange_command(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞.
    –§–æ—Ä–º–∞—Ç: /cancel_exchange <exchange_id>
    –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ–±–º–µ–Ω–∞.
    """
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /cancel_exchange <exchange_id>")
        return
    exchange_id = parts[1]
    data = load_data()
    pending_exchanges = data.get("pending_exchanges", [])
    pending = next((ex for ex in pending_exchanges if ex["exchange_id"] == exchange_id), None)
    if not pending:
        await message.answer("‚ùó –û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    if str(message.from_user.id) not in [pending["initiator_id"], pending["target_id"]]:
        await message.answer("‚ùó –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –æ–±–º–µ–Ω–µ.")
        return

    initiator = ensure_user(data, pending["initiator_id"])
    target = ensure_user(data, pending["target_id"])
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
    initiator.setdefault("tokens", []).append(pending["initiator_token"])
    target.setdefault("tokens", []).append(pending["target_token"])
    pending_exchanges.remove(pending)
    save_data(data)
    await message.answer("‚úÖ –û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é.")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
    other_party_id = pending["target_id"] if str(message.from_user.id) == pending["initiator_id"] else pending["initiator_id"]
    try:
        await bot.send_message(int(other_party_id), "‚ÑπÔ∏è –û–±–º–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã:", e)

async def auto_cancel_exchanges():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã.
    –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ–±–º–µ–Ω –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –∏ —Ç–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.
    """
    while True:
        data = load_data()
        pending_exchanges = data.get("pending_exchanges", [])
        now_ts = datetime.datetime.now().timestamp()
        changed = False
        expired_exchanges = [ex for ex in pending_exchanges if now_ts > ex.get("expires_at", 0)]
        for ex in expired_exchanges:
            initiator = ensure_user(data, ex["initiator_id"])
            target = ensure_user(data, ex["target_id"])
            initiator.setdefault("tokens", []).append(ex["initiator_token"])
            target.setdefault("tokens", []).append(ex["target_token"])
            pending_exchanges.remove(ex)
            changed = True
            try:
                await bot.send_message(
                    int(ex["initiator_id"]),
                    f"‚ÑπÔ∏è –í–∞—à –æ–±–º–µ–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∏—Å—Ç—ë–∫ –∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω."
                )
            except Exception as e:
                print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏:", e)
            try:
                await bot.send_message(
                    int(ex["target_id"]),
                    f"‚ÑπÔ∏è –û–±–º–µ–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∏—Å—Ç—ë–∫ –∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω."
                )
            except Exception as e:
                print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏:", e)
        if changed:
            data["pending_exchanges"] = pending_exchanges
            save_data(data)
        await asyncio.sleep(60)
