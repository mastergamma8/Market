import os
import json
import random
import itertools
import datetime
import asyncio
from typing import Tuple

from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import uvicorn
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7846917008:AAGaj9ZsWnb_2GmZC0q7YqTQEV39l0eBHxs"
DATA_FILE = "data.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (aiogram)
bot = Bot(
    token=BOT_TOKEN,
    default_bot_properties=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –±–æ—Ç–∞ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
def load_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return {}

def save_data(data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=2)

def ensure_user(data: dict, message: Message) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë—Ç –µ—ë —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
    """
    user_id = str(message.from_user.id)
    today = datetime.date.today().isoformat()
    if "users" not in data:
        data["users"] = {}
    if user_id not in data["users"]:
        data["users"][user_id] = {
            "last_activation_date": today,
            "activation_count": 0,
            "tokens": [],
            "balance": 1000,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            "username": message.from_user.username or message.from_user.first_name
        }
    return data["users"][user_id]

def beauty_score(num_str: str) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç ¬´–∫—Ä–∞—Å–æ—Ç—É¬ª –Ω–æ–º–µ—Ä–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω—É–ª–µ–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ü–∏—Ñ—Ä –∏ –±–æ–Ω—É—Å—É –∑–∞ –∫–æ—Ä–æ—Ç–∫—É—é –¥–ª–∏–Ω—É.
    """
    zeros = num_str.count("0")
    max_repeats = max(len(list(group)) for _, group in itertools.groupby(num_str))
    bonus = 6 - len(num_str)
    return zeros + max_repeats + bonus

def generate_number() -> Tuple[str, int]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã (–æ—Ç 3 –¥–æ 6 —Ü–∏—Ñ—Ä) —Å —É—á—ë—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏.
    –ß–µ–º –≤—ã—à–µ –æ—Ü–µ–Ω–∫–∞, —Ç–µ–º –Ω–∏–∂–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.
    """
    while True:
        length = random.choices([3, 4, 5, 6], weights=[1, 2, 3, 4])[0]
        candidate = "".join(random.choices("0123456789", k=length))
        score = beauty_score(candidate)
        if random.random() < 1 / (score + 1):
            return candidate, score

# --------------------- Telegram Bot Handlers ---------------------
@dp.message(Command("start"))
async def start_cmd(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    data = load_data()
    ensure_user(data, message)
    save_data(data)
    text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Market –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤! üéâ\n\n"
        "üí° –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /mint ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (–±–µ—Å–ø–ª–∞—Ç–Ω–æ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å) üöÄ\n"
        "‚Ä¢ /collection ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–æ–º–µ—Ä–æ–≤ üòé\n"
        "‚Ä¢ /balance ‚Äî —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å üíé\n"
        "‚Ä¢ /sell <–Ω–æ–º–µ—Ä> <—Ü–µ–Ω–∞> ‚Äî –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É üõí\n"
        "‚Ä¢ /market ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ üåê\n"
        "‚Ä¢ /buy <–Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞> ‚Äî –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ üí∞\n"
        "‚Ä¢ /participants ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•\n"
        "‚Ä¢ /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä> ‚Äî –æ–±–º–µ–Ω –Ω–æ–º–µ—Ä–∞–º–∏ üîÑ\n"
        "\n–¢–∞–∫–∂–µ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à <a href='http://<YOUR_GLITCH_APP_URL>'>–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</a> –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!"
    )
    await message.answer(text)

@dp.message(Command("mint"))
async def mint_number(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /mint ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.
    –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 3 –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –¥–µ–Ω—å.
    """
    data = load_data()
    user = ensure_user(data, message)
    today = datetime.date.today().isoformat()
    if user["last_activation_date"] != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
    if user["activation_count"] >= 3:
        await message.answer("üòî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    user["activation_count"] += 1
    num, score = generate_number()
    entry = {"token": num, "score": score, "timestamp": datetime.datetime.now().isoformat()}
    user["tokens"].append(entry)
    save_data(data)
    reply = (
        f"‚ú® –í–∞—à –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {num}\n"
        f"üî• –û—Ü–µ–Ω–∫–∞: {score}\n"
        f"üî¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {user['activation_count']}/3 –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    )
    await message.answer(reply)

@dp.message(Command("collection"))
async def show_collection(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /collection ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_data()
    user = ensure_user(data, message)
    tokens = user.get("tokens", [])
    if not tokens:
        await message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    msg = "üé® –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤:\n" + "\n".join(
        f"{idx}. {t['token']} | –û—Ü–µ–Ω–∫–∞: {t['score']} | {t['timestamp']}"
        for idx, t in enumerate(tokens, start=1)
    )
    await message.answer(msg)

@dp.message(Command("balance"))
async def show_balance(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /balance ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = load_data()
    user = ensure_user(data, message)
    await message.answer(f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} üíé")

@dp.message(Command("sell"))
async def sell_number(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /sell <–Ω–æ–º–µ—Ä> <—Ü–µ–Ω–∞> ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
    –ü—Ä–∏–º–µ—Ä: /sell 2 500
    """
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /sell –Ω–æ–º–µ—Ä —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /sell 2 500)")
        return
    try:
        index = int(parts[1]) - 1
        price = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã.")
        return
    data = load_data()
    user = ensure_user(data, message)
    tokens = user.get("tokens", [])
    if index < 0 or index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return
    item = tokens.pop(index)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": str(message.from_user.id),
        "token": item,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    await message.answer(f"üöÄ –ù–æ–º–µ—Ä {item['token']} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} üíé!")

@dp.message(Command("market"))
async def show_market(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /market ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ."""
    data = load_data()
    market = data.get("market", [])
    if not market:
        await message.answer("üåê –ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.")
        return
    msg = "üåê –ù–æ–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for idx, listing in enumerate(market, start=1):
        seller_id = listing.get("seller_id")
        seller_name = data.get("users", {}).get(seller_id, {}).get("username", seller_id)
        item = listing["token"]
        msg += f"{idx}. {item['token']} | –û—Ü–µ–Ω–∫–∞: {item['score']} | –¶–µ–Ω–∞: {listing['price']} üíé | –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
    await message.answer(msg)

@dp.message(Command("buy"))
async def buy_number(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /buy <–Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞> ‚Äî –ø–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞ –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    –ü—Ä–∏–º–µ—Ä: /buy 1
    """
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /buy –Ω–æ–º–µ—Ä_–ª–∏—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 1)")
        return
    try:
        listing_index = int(parts[1]) - 1
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer_id = str(message.from_user.id)
    buyer = ensure_user(data, message)
    if buyer_id == seller_id:
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä!")
        return
    if buyer.get("balance", 0) < price:
        await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price
    buyer.setdefault("tokens", []).append(listing["token"])
    market.pop(listing_index)
    save_data(data)
    await message.answer(
        f"üéâ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–º–µ—Ä {listing['token']['token']} –∑–∞ {price} üíé!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {buyer['balance']} üíé."
    )
    if seller:
        try:
            await bot.send_message(int(seller_id),
                                   f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –Ω–æ–º–µ—Ä {listing['token']['token']} –∫—É–ø–ª–µ–Ω –∑–∞ {price} üíé.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:", e)

@dp.message(Command("participants"))
async def list_participants(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /participants ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    data = load_data()
    users = data.get("users", {})
    if not users:
        await message.answer("‚ùó –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    msg = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, info in users.items():
        cnt = len(info.get("tokens", []))
        msg += f"{info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {uid}) ‚Äî –ë–∞–ª–∞–Ω—Å: {info.get('balance', 0)} üíé, –Ω–æ–º–µ—Ä–æ–≤: {cnt}\n"
    await message.answer(msg)

@dp.message(Command("exchange"))
async def exchange_numbers(message: Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä> ‚Äî –æ–±–º–µ–Ω –Ω–æ–º–µ—Ä–∞–º–∏.
    –ü—Ä–∏–º–µ—Ä: /exchange 1 123456789 2
    """
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä>")
        return
    try:
        my_index = int(parts[1]) - 1
        target_uid = parts[2]
        target_index = int(parts[3]) - 1
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –∏ ID —á–∏—Å–ª–∞.")
        return
    data = load_data()
    initiator = ensure_user(data, message)
    if target_uid == str(message.from_user.id):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    target = data.get("users", {}).get(target_uid)
    if not target:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 0 or my_index >= len(my_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    if target_index < 0 or target_index >= len(target_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    my_item = my_tokens.pop(my_index)
    target_item = target_tokens.pop(target_index)
    my_tokens.append(target_item)
    target_tokens.append(my_item)
    save_data(data)
    await message.answer(
        f"üéâ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–¥–∞–ª–∏ –Ω–æ–º–µ—Ä {my_item['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {target_item['token']}."
    )
    try:
        await bot.send_message(
            int(target_uid),
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –æ–±–º–µ–Ω—è–ª —Å –≤–∞–º–∏ –Ω–æ–º–µ—Ä–∞.\n"
            f"–í—ã –æ—Ç–¥–∞–ª–∏ {target_item['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {my_item['token']}."
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", e)

# --------------------- –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (FastAPI) ---------------------
app = FastAPI()

if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")
templates.env.globals["enumerate"] = enumerate

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/market", response_class=HTMLResponse)
async def web_market(request: Request):
    data = load_data()
    market = data.get("market", [])
    return templates.TemplateResponse("market.html", {"request": request, "market": market, "users": data.get("users", {})})

@app.get("/profile/{user_id}", response_class=HTMLResponse)
async def profile(request: Request, user_id: str):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    return templates.TemplateResponse("profile.html", {"request": request, "user": user, "user_id": user_id})

@app.get("/mint", response_class=HTMLResponse)
async def web_mint(request: Request):
    return templates.TemplateResponse("mint.html", {"request": request})

@app.post("/mint", response_class=HTMLResponse)
async def web_mint_post(request: Request, user_id: str = Form(...)):
    data = load_data()
    if "users" not in data:
        data["users"] = {}
    if user_id not in data["users"]:
        data["users"][user_id] = {
            "last_activation_date": datetime.date.today().isoformat(),
            "activation_count": 0,
            "tokens": [],
            "balance": 1000,
            "username": user_id
        }
    user = data["users"][user_id]
    today = datetime.date.today().isoformat()
    if user["last_activation_date"] != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
    if user["activation_count"] >= 3:
        return templates.TemplateResponse("mint.html", {"request": request, "error": "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!", "user_id": user_id})
    user["activation_count"] += 1
    num, score = generate_number()
    entry = {"token": num, "score": score, "timestamp": datetime.datetime.now().isoformat()}
    user["tokens"].append(entry)
    save_data(data)
    return RedirectResponse(url=f"/profile/{user_id}", status_code=303)

@app.get("/sell", response_class=HTMLResponse)
async def web_sell(request: Request):
    return templates.TemplateResponse("sell.html", {"request": request})

@app.post("/sell", response_class=HTMLResponse)
async def web_sell_post(request: Request, user_id: str = Form(...), token_index: int = Form(...), price: int = Form(...)):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    tokens = user.get("tokens", [])
    if token_index < 1 or token_index > len(tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.", status_code=400)
    token = tokens.pop(token_index - 1)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": user_id,
        "token": token,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    return RedirectResponse(url=f"/profile/{user_id}", status_code=303)

@app.get("/exchange", response_class=HTMLResponse)
async def web_exchange(request: Request):
    return templates.TemplateResponse("exchange.html", {"request": request})

@app.post("/exchange", response_class=HTMLResponse)
async def web_exchange_post(request: Request, user_id: str = Form(...), my_index: int = Form(...), target_id: str = Form(...), target_index: int = Form(...)):
    data = load_data()
    initiator = data.get("users", {}).get(user_id)
    target = data.get("users", {}).get(target_id)
    if not initiator or not target:
        return HTMLResponse("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens) or target_index < 1 or target_index > len(target_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", status_code=400)
    my_token = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)
    my_tokens.append(target_token)
    target_tokens.append(my_token)
    save_data(data)
    return RedirectResponse(url=f"/profile/{user_id}", status_code=303)

@app.get("/participants", response_class=HTMLResponse)
async def web_participants(request: Request):
    data = load_data()
    users = data.get("users", {})
    return templates.TemplateResponse("participants.html", {"request": request, "users": users})

@app.post("/buy/{listing_index}")
async def web_buy(request: Request, listing_index: int, buyer_id: str = Form(...)):
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.", status_code=400)
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer = data.get("users", {}).get(buyer_id)
    if not buyer:
        return HTMLResponse("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    if buyer.get("balance", 0) < price:
        return HTMLResponse("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", status_code=400)
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price
    buyer.setdefault("tokens", []).append(listing["token"])
    market.pop(listing_index)
    save_data(data)
    return RedirectResponse(url=f"/profile/{buyer_id}", status_code=303)

# --------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---------------------
async def main():
    bot_task = asyncio.create_task(dp.start_polling(bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    web_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, web_task)

if __name__ == "__main__":
    asyncio.run(main())
