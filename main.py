import os
import json
import random
import itertools
import math
import datetime
import asyncio
import hashlib
import hmac
import urllib.parse
from typing import Tuple
from functools import wraps

from aiogram import Bot, Dispatcher, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types.input_file import FSInputFile  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import uvicorn
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7846917008:AAGaj9ZsWnb_2GmZC0q7YqTQEV39l0eBHxs"
DATA_FILE = "data.json"
ADMIN_IDS = {"1809630966", "7053559428"}
BOT_USERNAME = "TestMacprobot"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (aiogram)
bot = Bot(
    token=BOT_TOKEN,
    default_bot_properties=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_data() -> dict:
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return {}

def save_data(data: dict) -> None:
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=2)

def ensure_user(data: dict, user_id: str, username: str = "Unknown", photo_url: str = None) -> dict:
    today = datetime.date.today().isoformat()
    if "users" not in data:
        data["users"] = {}
    if user_id not in data["users"]:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        data["users"][user_id] = {
            "last_activation_date": today,
            "activation_count": 0,
            "tokens": [],
            "balance": 1000,
            "username": username,
            "photo_url": photo_url,
            "logged_in": False,
            "login_code": None,
            "code_expiry": None,
            "verified": False
        }
    return data["users"][user_id]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞, —Ü–≤–µ—Ç–∞ —Ü–∏—Ñ—Ä –∏ —Ñ–æ–Ω–∞ ---
def compute_number_rarity(token_str: str) -> str:
    length = len(token_str)
    max_repeats = max(len(list(group)) for _, group in itertools.groupby(token_str))
    base_score = 10 - length  # –ß–µ–º –º–µ–Ω—å—à–µ —Ü–∏—Ñ—Ä, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å
    bonus = max_repeats - 1
    total_score = base_score + bonus

    if total_score >= 9:
        return "0.1%"
    elif total_score == 8:
        return "0.3%"
    elif total_score == 7:
        return "0.5%"
    elif total_score == 6:
        return "0.8%"
    elif total_score == 5:
        return "1%"
    elif total_score == 4:
        return "1.5%"
    elif total_score == 3:
        return "2%"
    elif total_score == 2:
        return "2.5%"
    else:
        return "3%"

def generate_text_attributes() -> tuple:
    r = random.random()
    if r < 0.001:
        text_pool = ["#FFFFFF", "#000000"]
        text_rarity = "0.1%"
    elif r < 0.01:
        text_pool = ["#FFD700", "#C0C0C0"]
        text_rarity = "0.5%"
    elif r < 0.03:
        text_pool = ["#1abc9c", "#2ecc71"]
        text_rarity = "1%"
    elif r < 0.06:
        text_pool = ["#3498db", "#9b59b6", "#34495e"]
        text_rarity = "1.5%"
    elif r < 0.16:
        text_pool = ["#FF5733", "#33FFCE"]
        text_rarity = "2%"
    elif r < 0.3:
        text_pool = ["#8e44ad", "#2c3e50"]
        text_rarity = "2.5%"
    else:
        text_pool = ["#d35400", "#e67e22", "#27ae60"]
        text_rarity = "3%"
    return random.choice(text_pool), text_rarity

def generate_bg_attributes() -> tuple:
    r = random.random()
    if r < 0.001:
        bg_pool = ["#FFFFFF", "#000000"]
        bg_rarity = "0.1%"
    elif r < 0.01:
        bg_pool = ["#FF69B4", "#8A2BE2"]
        bg_rarity = "0.5%"
    elif r < 0.03:
        bg_pool = ["#e74c3c", "#e67e22"]
        bg_rarity = "1%"
    elif r < 0.06:
        bg_pool = ["#16a085", "#27ae60"]
        bg_rarity = "1.5%"
    elif r < 0.16:
        bg_pool = ["#f1c40f", "#1abc9c"]
        bg_rarity = "2%"
    elif r < 0.3:
        bg_pool = ["#2ecc71", "#3498db"]
        bg_rarity = "2.5%"
    else:
        bg_pool = ["#9b59b6", "#34495e", "#808000"]
        bg_rarity = "3%"
    return random.choice(bg_pool), bg_rarity

def compute_overall_rarity(num_rarity: str, text_rarity: str, bg_rarity: str) -> str:
    try:
        num_val = float(num_rarity.replace('%','').replace(',', '.'))
    except:
        num_val = 3.0
    try:
        text_val = float(text_rarity.replace('%','').replace(',', '.'))
    except:
        text_val = 3.0
    try:
        bg_val = float(bg_rarity.replace('%','').replace(',', '.'))
    except:
        bg_val = 3.0

    overall = (num_val * text_val * bg_val) ** (1/3)
    if overall.is_integer():
        return f"{int(overall)}%"
    else:
        return f"{overall:.1f}%"

def generate_number_from_value(token_str: str) -> dict:
    number_rarity = compute_number_rarity(token_str)
    text_color, text_rarity = generate_text_attributes()
    bg_color, bg_rarity = generate_bg_attributes()
    overall_rarity = compute_overall_rarity(number_rarity, text_rarity, bg_rarity)
    return {
        "token": token_str,
        "number_rarity": number_rarity,
        "text_color": text_color,
        "text_rarity": text_rarity,
        "bg_color": bg_color,
        "bg_rarity": bg_rarity,
        "overall_rarity": overall_rarity,
        "timestamp": datetime.datetime.now().isoformat()
    }

def generate_number() -> dict:
    length = random.choice([3, 4, 5, 6])
    token_str = "".join(random.choices("0123456789", k=length))
    return generate_number_from_value(token_str)

def generate_login_code() -> str:
    return str(random.randint(100000, 999999))

# –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ (–≤ –≤–µ–±‚Äë—á–∞—Å—Ç–∏)
def get_rarity(score: int) -> str:
    if score > 12:
        return "2.5%"
    elif score > 8:
        return "2%"
    else:
        return "1.5%"

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def require_login(func):
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        data = load_data()
        user = ensure_user(
            data,
            str(message.from_user.id),
            message.from_user.username or message.from_user.first_name
        )
        if not user.get("logged_in"):
            await message.answer(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram‚Äë–±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /login <–í–∞—à Telegram ID>."
            )
            return
        return await func(message, *args, **kwargs)
    return wrapper

# -------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ --------------------
@dp.message(Command("start"))
async def start_cmd(message: Message) -> None:
    data = load_data()
    user = ensure_user(
        data,
        str(message.from_user.id),
        message.from_user.username or message.from_user.first_name
    )
    
    parts = message.text.split(maxsplit=1)
    args = parts[1].strip() if len(parts) > 1 else ""
    
    if args.startswith("redeem_"):
        voucher_code = args[len("redeem_"):]
        voucher = None
        for v in data.get("vouchers", []):
            if v["code"] == voucher_code:
                voucher = v
                break

        if voucher is None:
            await message.answer("‚ùó –í–∞—É—á–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        else:
            if voucher.get("redeemed_count", 0) >= voucher.get("max_uses", 1):
                await message.answer("‚ùó –≠—Ç–æ—Ç –≤–∞—É—á–µ—Ä —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
            else:
                redeemed_by = voucher.get("redeemed_by", [])
                if str(message.from_user.id) in redeemed_by:
                    await message.answer("‚ùó –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –≤–∞—É—á–µ—Ä.")
                else:
                    if voucher["type"] == "activation":
                        today = datetime.date.today().isoformat()
                        if user.get("last_activation_date") != today:
                            user["last_activation_date"] = today
                            user["activation_count"] = 0
                            user["extra_attempts"] = 0
                        user["extra_attempts"] = user.get("extra_attempts", 0) + voucher["value"]
                        redemption_message = (
                            f"‚úÖ –í–∞—É—á–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {voucher['value']} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
                        )
                    elif voucher["type"] == "money":
                        user["balance"] = user.get("balance", 0) + voucher["value"]
                        redemption_message = (
                            f"‚úÖ –í–∞—É—á–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {voucher['value']} –µ–¥–∏–Ω–∏—Ü –Ω–∞ –±–∞–ª–∞–Ω—Å."
                        )
                    else:
                        redemption_message = "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∞—É—á–µ—Ä–∞."
                    
                    redeemed_by.append(str(message.from_user.id))
                    voucher["redeemed_by"] = redeemed_by
                    voucher["redeemed_count"] = voucher.get("redeemed_count", 0) + 1
                    save_data(data)
                    
                    await message.answer(redemption_message)
        return

    welcome_text = (
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Market –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤! üéâ\n\n"
        "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–í–∞—à Telegram ID>.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /verify <–∫–æ–¥>.\n"
        "–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤–æ—à–ª–∏, –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: /mint, /collection, /balance, /sell, /market, /buy, /participants, /exchange, /logout.\n"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: /setavatar\n"
        "\n–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: "
        f"https://market-production-84b2.up.railway.app/auto_login?user_id={message.from_user.id}"
    )
    await message.answer(welcome_text)

@dp.message(Command("login"))
async def bot_login(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /login <–í–∞—à Telegram ID>")
        return
    user_id = parts[1]
    if user_id != str(message.from_user.id):
        await message.answer("‚ùó –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.")
        return
    data = load_data()
    user = ensure_user(data, user_id, message.from_user.username or message.from_user.first_name)
    if user.get("logged_in"):
        await message.answer("–í—ã —É–∂–µ –≤–æ—à–ª–∏!")
        return
    code = generate_login_code()
    expiry = (datetime.datetime.now() + datetime.timedelta(minutes=5)).timestamp()
    user["login_code"] = code
    user["code_expiry"] = expiry
    save_data(data)
    try:
        await bot.send_message(int(user_id), f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: {code}")
        await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify <–∫–æ–¥> –¥–ª—è –≤—Ö–æ–¥–∞.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:", e)

@dp.message(Command("verify"))
async def bot_verify(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /verify <–∫–æ–¥>")
        return
    code = parts[1]
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user.get("code_expiry", 0) < datetime.datetime.now().timestamp():
        await message.answer("–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")
        return
    if user.get("login_code") != code:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
        return
    user["logged_in"] = True
    user["login_code"] = None
    user["code_expiry"] = None
    save_data(data)
    await message.answer("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

@dp.message(Command("logout"))
async def bot_logout(message: Message) -> None:
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if user:
        user["logged_in"] = False
        save_data(data)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login <–í–∞—à Telegram ID>.")

@dp.message(F.photo)
async def handle_setavatar_photo(message: Message) -> None:
    if message.caption and message.caption.startswith("/setavatar"):
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        data = load_data()
        user = ensure_user(data, str(message.from_user.id),
                           message.from_user.username or message.from_user.first_name)
        user["photo_url"] = file_url
        save_data(data)
        await message.answer("‚úÖ –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!")

@dp.message(Command("mint"))
@require_login
async def mint_number(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id), message.from_user.username or message.from_user.first_name)
    today = datetime.date.today().isoformat()
    if user.get("last_activation_date") != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
        user["extra_attempts"] = 0
    effective_limit = 3 + user.get("extra_attempts", 0)
    if user["activation_count"] >= effective_limit:
        await message.answer("üòî –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        return
    user["activation_count"] += 1
    token_data = generate_number()
    token_data["timestamp"] = datetime.datetime.now().isoformat()
    user["tokens"].append(token_data)
    save_data(data)
    await message.answer(
        f"‚ú® –í–∞—à –Ω–æ–≤—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {token_data['token']}\n"
        f"üé® –†–µ–¥–∫–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞: {token_data['number_rarity']}\n"
        f"üé® –†–µ–¥–∫–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ —Ü–∏—Ñ—Ä: {token_data['text_rarity']}\n"
        f"üé® –†–µ–¥–∫–æ—Å—Ç—å —Ñ–æ–Ω–∞: {token_data['bg_rarity']}\n"
        f"üíé –û–±—â–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: {token_data['overall_rarity']}"
    )
    
@dp.message(Command("collection"))
@require_login
async def show_collection(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if not tokens:
        await message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    msg = "üé® " + "\n".join(
        f"{idx}. {t['token']} | –†–µ–¥–∫–æ—Å—Ç—å: {t.get('overall_rarity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}" 
        for idx, t in enumerate(tokens, start=1)
    )
    await message.answer(msg)

@dp.message(Command("balance"))
@require_login
async def show_balance(message: Message) -> None:
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    await message.answer(f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} üíé")

@dp.message(Command("sell"))
@require_login
async def sell_number(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /sell –Ω–æ–º–µ—Ä —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /sell 2 500)")
        return
    try:
        index = int(parts[1]) - 1
        price = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã.")
        return
    data = load_data()
    user = ensure_user(data, str(message.from_user.id))
    tokens = user.get("tokens", [])
    if index < 0 or index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return
    item = tokens.pop(index)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": str(message.from_user.id),
        "token": item,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    await message.answer(f"üöÄ –ù–æ–º–µ—Ä {item['token']} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} üíé!")

@dp.message(Command("market"))
async def show_market(message: Message) -> None:
    data = load_data()
    market = data.get("market", [])
    if not market:
        await message.answer("üåê –ù–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.")
        return
    msg = "üåê –ù–æ–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ:\n"
    for idx, listing in enumerate(market, start=1):
        seller_id = listing.get("seller_id")
        seller_name = data.get("users", {}).get(seller_id, {}).get("username", seller_id)
        token_info = listing["token"]
        msg += (f"{idx}. {token_info['token']} | –¶–µ–Ω–∞: {listing['price']} üíé | "
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name} | –†–µ–¥–∫–æ—Å—Ç—å: {token_info.get('overall_rarity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
    await message.answer(msg)

@dp.message(Command("buy"))
@require_login
async def buy_number(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /buy –Ω–æ–º–µ—Ä_–ª–∏—Å—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /buy 1)")
        return
    try:
        listing_index = int(parts[1]) - 1
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.")
        return
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer_id = str(message.from_user.id)
    buyer = ensure_user(data, buyer_id)
    if buyer_id == seller_id:
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä!")
        return
    if buyer.get("balance", 0) < price:
        await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price

    token = listing["token"]
    token["bought_price"] = price
    token["seller_id"] = seller_id

    buyer.setdefault("tokens", []).append(token)
    market.pop(listing_index)
    save_data(data)
    await message.answer(f"üéâ –í—ã –∫—É–ø–∏–ª–∏ –Ω–æ–º–µ—Ä {token['token']} –∑–∞ {price} üíé!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {buyer['balance']} üíé.")
    if seller:
        try:
            await bot.send_message(int(seller_id),
                                   f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –Ω–æ–º–µ—Ä {token['token']} –∫—É–ø–ª–µ–Ω –∑–∞ {price} üíé.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:", e)

@dp.message(Command("participants"))
async def list_participants(message: Message) -> None:
    data = load_data()
    users = data.get("users", {})
    if not users:
        await message.answer("‚ùó –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    msg = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    for uid, info in users.items():
        cnt = len(info.get("tokens", []))
        verified_mark = " ‚úÖ" if info.get("verified", False) else ""
        msg += f"{info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}{verified_mark} (ID: {uid}) ‚Äî –ë–∞–ª–∞–Ω—Å: {info.get('balance', 0)} üíé, –Ω–æ–º–µ—Ä–æ–≤: {cnt}\n"
    await message.answer(msg)
    
@dp.message(Command("exchange"))
@require_login
async def exchange_numbers(message: Message) -> None:
    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /exchange <–º–æ–π –Ω–æ–º–µ—Ä> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∏—Ö –Ω–æ–º–µ—Ä>")
        return
    try:
        my_index = int(parts[1]) - 1
        target_uid = parts[2]
        target_index = int(parts[3]) - 1
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –∏ ID —á–∏—Å–ª–∞.")
        return
    data = load_data()
    initiator = ensure_user(data, str(message.from_user.id))
    if target_uid == str(message.from_user.id):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    target = data.get("users", {}).get(target_uid)
    if not target:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    if target_index < 1 or target_index > len(target_tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    my_token = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)
    my_tokens.append(target_token)
    target_tokens.append(my_token)
    save_data(data)
    await message.answer(f"üéâ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í—ã –æ—Ç–¥–∞–ª–∏ –Ω–æ–º–µ—Ä {my_token['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {target_token['token']}.")
    try:
        await bot.send_message(int(target_uid),
                               f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {initiator.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –æ–±–º–µ–Ω—è–ª —Å –≤–∞–º–∏ –Ω–æ–º–µ—Ä–∞.\n"
                               f"–í—ã –æ—Ç–¥–∞–ª–∏ {target_token['token']} –∏ –ø–æ–ª—É—á–∏–ª–∏ {my_token['token']}.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞:", e)

# ---- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ----
@dp.message(Command("verifycation"))
async def verify_user_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /verifycation <user_id>")
        return
    target_user_id = parts[1]
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    VERIFICATION_ICON_URL = "https://i.ibb.co/4ZjYfn0w/verificationtth.png"
    user["verified"] = True
    user["verification_icon"] = VERIFICATION_ICON_URL
    save_data(data)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")

@dp.message(Command("unverify"))
async def unverify_user_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /unverify <user_id>")
        return
    target_user_id = parts[1]
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    user["verified"] = False
    if "verification_icon" in user:
        del user["verification_icon"]
    save_data(data)
    await message.answer(f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) —É–¥–∞–ª–µ–Ω–∞.")

@dp.message(Command("setbalance"))
async def set_balance(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /setbalance <user_id> <–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å>")
        return
    target_user_id = parts[1]
    try:
        new_balance = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    old_balance = user.get("balance", 0)
    user["balance"] = new_balance
    save_data(data)
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) –∏–∑–º–µ–Ω—ë–Ω —Å {old_balance} –Ω–∞ {new_balance}."
    )

@dp.message(Command("listtokens"))
async def list_tokens_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()[1:]
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /listtokens <user_id>")
        return
    target_user_id = args[0]
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    tokens = user.get("tokens", [])
    if not tokens:
        await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.")
        return
    msg = f"–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}):\n"
    for idx, token in enumerate(tokens, start=1):
        msg += f"{idx}. {token['token']} | –†–µ–¥–∫–æ—Å—Ç—å: {token.get('overall_rarity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    await message.answer(msg)

@dp.message(Command("settoken"))
async def set_token_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) < 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /settoken <user_id> <–Ω–æ–º–µ—Ä_–ø–æ–∑–∏—Ü–∏–∏> <–Ω–æ–≤—ã–π_–Ω–æ–º–µ—Ä>")
        return
    target_user_id = parts[1]
    try:
        token_index = int(parts[2]) - 1
    except ValueError:
        await message.answer("‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        return
    new_token_value = parts[3]
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    tokens = user.get("tokens", [])
    if token_index < 0 or token_index >= len(tokens):
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
        return
    old_token = tokens[token_index].copy()
    new_token_data = generate_number_from_value(new_token_value)
    tokens[token_index] = new_token_data
    save_data(data)
    await message.answer(
        f"‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) –∏–∑–º–µ–Ω—ë–Ω.\n"
        f"–ë—ã–ª–æ: {old_token}\n–°—Ç–∞–ª–æ: {tokens[token_index]}"
    )

@dp.message(Command("addattempts"))
async def add_attempts_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /addattempts <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫>")
        return
    target_user_id = parts[1]
    try:
        additional = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    data = load_data()
    if "users" not in data or target_user_id not in data["users"]:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user = data["users"][target_user_id]
    today = datetime.date.today().isoformat()
    if user.get("last_activation_date") != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
        user["extra_attempts"] = 0
    user["extra_attempts"] = user.get("extra_attempts", 0) + additional
    effective_limit = 3 + user["extra_attempts"]
    save_data(data)
    await message.answer(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} (ID: {target_user_id}) –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n"
        f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫: {effective_limit} (–∏–∑ –Ω–∏—Ö –±–∞–∑–æ–≤—ã—Ö 3)."
    )
    
@dp.message(Command("createvoucher"))
async def create_voucher_admin(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split()
    if len(parts) < 4:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /createvoucher <—Ç–∏–ø: activation|money> <–∑–Ω–∞—á–µ–Ω–∏–µ> <–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π> [<–∫–æ–¥>]")
        return

    voucher_type = parts[1].lower()
    if voucher_type not in ["activation", "money"]:
        await message.answer("‚ùó –¢–∏–ø –≤–∞—É—á–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'activation' –∏–ª–∏ 'money'.")
        return

    try:
        value = int(parts[2])
        max_uses = int(parts[3])
    except ValueError:
        await message.answer("‚ùó –ó–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    if len(parts) >= 5:
        code = parts[4]
    else:
        code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))

    data = load_data()
    if "vouchers" not in data:
        data["vouchers"] = []

    voucher = {
        "code": code,
        "type": voucher_type,
        "value": value,
        "max_uses": max_uses,
        "redeemed_count": 0,
        "created_at": datetime.datetime.now().isoformat(),
        "created_by": str(message.from_user.id)
    }

    data["vouchers"].append(voucher)
    save_data(data)

    voucher_link = f"https://t.me/{BOT_USERNAME}?start=redeem_{code}"
    await message.answer(
        f"‚úÖ –í–∞—É—á–µ—Ä —Å–æ–∑–¥–∞–Ω:\n"
        f"–¢–∏–ø: {voucher_type}\n"
        f"–ó–Ω–∞—á–µ–Ω–∏–µ: {value}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {max_uses}\n"
        f"–ö–æ–¥: {code}\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—É—á–µ—Ä–∞: {voucher_link}"
    )
    
@dp.message(Command("getdata"))
async def get_data_file(message: Message) -> None:
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not os.path.exists(DATA_FILE):
        await message.answer("–§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    document = FSInputFile(DATA_FILE)
    await message.answer_document(document=document, caption="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ data.json")

@dp.message(F.document)
async def set_db_from_document(message: Message) -> None:
    if message.caption and message.caption.strip().startswith("/setdb"):
        if str(message.from_user.id) not in ADMIN_IDS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        try:
            file_info = await bot.get_file(message.document.file_id)
            file_bytes = await bot.download_file(file_info.file_path)
            with open(DATA_FILE, "wb") as f:
                f.write(file_bytes.getvalue())
            await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            await message.answer(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# --------------------- –í–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (FastAPI) ---------------------
app = FastAPI()

if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")
templates.env.globals["enumerate"] = enumerate
templates.env.globals["get_rarity"] = get_rarity

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@app.middleware("http")
async def auth_middleware(request: Request, call_next):
    # –ò–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø—É—Ç–µ–π —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ /first_visit, /logged_out –∏ /auto_login (–∞ —Ç–∞–∫–∂–µ /static)
    allowed_paths = ["/first_visit", "/logged_out", "/auto_login"]
    if any(request.url.path.startswith(path) for path in allowed_paths) or request.url.path.startswith("/static"):
        return await call_next(request)
    
    user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse(
            "<h1>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h1>"
            "<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram‚Äë–±–æ—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º.</p>",
            status_code=401
        )
    
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user or not user.get("logged_in"):
        return HTMLResponse(
            "<h1>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h1>"
            "<p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram‚Äë–±–æ—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º.</p>",
            status_code=401
        )
    
    return await call_next(request)

# –í–µ–±‚Äë–º–∞—Ä—à—Ä—É—Ç—ã

# –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
@app.get("/first_visit", response_class=HTMLResponse)
async def first_visit(request: Request):
    return templates.TemplateResponse("first_visit.html", {"request": request})

@app.get("/logged_out", response_class=HTMLResponse)
async def logged_out(request: Request):
    return templates.TemplateResponse("logged_out.html", {"request": request})

@app.get("/auto_login", response_class=HTMLResponse)
async def auto_login(request: Request, user_id: str):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user or not user.get("logged_in"):
        return RedirectResponse(url="/first_visit", status_code=303)
    response = RedirectResponse(url=f"/profile/{user_id}", status_code=303)
    response.set_cookie("user_id", user_id, max_age=60*60*24*30, path="/")
    return response

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    user_id = request.cookies.get("user_id")
    data = load_data()
    user = data.get("users", {}).get(user_id) if user_id else None
    market = data.get("market", [])
    return templates.TemplateResponse("index.html", {
        "request": request,
        "user": user,
        "user_id": user_id,
        "market": market,
        "users": data.get("users", {})
    })

@app.get("/profile/{user_id}", response_class=HTMLResponse)
async def profile(request: Request, user_id: str):
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    current_user_id = request.cookies.get("user_id")
    is_owner = (current_user_id == user_id)
    return templates.TemplateResponse("profile.html", {
        "request": request,
        "user": user,
        "user_id": user_id,
        "is_owner": is_owner
    })

@app.get("/mint", response_class=HTMLResponse)
async def web_mint(request: Request):
    return templates.TemplateResponse("mint.html", {"request": request})

@app.post("/mint", response_class=HTMLResponse)
async def web_mint_post(request: Request, user_id: str = Form(None)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    user = ensure_user(data, user_id)
    today = datetime.date.today().isoformat()
    if user.get("last_activation_date") != today:
        user["last_activation_date"] = today
        user["activation_count"] = 0
        user["extra_attempts"] = 0
    effective_limit = 3 + user.get("extra_attempts", 0)
    if user["activation_count"] >= effective_limit:
        return templates.TemplateResponse("mint.html", {
            "request": request,
            "error": "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
            "user_id": user_id
        })
    user["activation_count"] += 1
    token_data = generate_number()
    token_data["timestamp"] = datetime.datetime.now().isoformat()
    user["tokens"].append(token_data)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": user, "user_id": user_id})
    
@app.get("/sell", response_class=HTMLResponse)
async def web_sell(request: Request):
    return templates.TemplateResponse("sell.html", {"request": request})

@app.post("/sell", response_class=HTMLResponse)
async def web_sell_post(request: Request, user_id: str = Form(None), token_index: int = Form(...), price: int = Form(...)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    tokens = user.get("tokens", [])
    if token_index < 1 or token_index > len(tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.", status_code=400)
    token = tokens.pop(token_index - 1)
    if "market" not in data:
        data["market"] = []
    listing = {
        "seller_id": user_id,
        "token": token,
        "price": price,
        "timestamp": datetime.datetime.now().isoformat()
    }
    data["market"].append(listing)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": user, "user_id": user_id})

@app.get("/exchange", response_class=HTMLResponse)
async def web_exchange(request: Request):
    return templates.TemplateResponse("exchange.html", {"request": request})

@app.post("/exchange", response_class=HTMLResponse)
async def web_exchange_post(request: Request, user_id: str = Form(None), my_index: int = Form(...), target_id: str = Form(...), target_index: int = Form(...)):
    if not user_id:
        user_id = request.cookies.get("user_id")
    if not user_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    initiator = data.get("users", {}).get(user_id)
    target = data.get("users", {}).get(target_id)
    if not initiator or not target:
        return HTMLResponse("–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    my_tokens = initiator.get("tokens", [])
    target_tokens = target.get("tokens", [])
    if my_index < 1 or my_index > len(my_tokens) or target_index < 1 or target_index > len(target_tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", status_code=400)
    my_token = my_tokens.pop(my_index - 1)
    target_token = target_tokens.pop(target_index - 1)
    my_tokens.append(target_token)
    target_tokens.append(my_token)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": initiator, "user_id": user_id})

@app.get("/participants", response_class=HTMLResponse)
async def web_participants(request: Request):
    data = load_data()
    users = data.get("users", {})
    return templates.TemplateResponse("participants.html", {"request": request, "users": users})

@app.get("/market", response_class=HTMLResponse)
async def web_market(request: Request):
    data = load_data()
    market = data.get("market", [])
    return templates.TemplateResponse("market.html", {
        "request": request,
        "market": market,
        "users": data.get("users", {}),
        "buyer_id": request.cookies.get("user_id")
    })

@app.post("/buy/{listing_index}")
async def web_buy(request: Request, listing_index: int, buyer_id: str = Form(None)):
    if not buyer_id:
        buyer_id = request.cookies.get("user_id")
    if not buyer_id:
        return HTMLResponse("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ.", status_code=400)
    data = load_data()
    market = data.get("market", [])
    if listing_index < 0 or listing_index >= len(market):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∏–Ω–≥–∞.", status_code=400)
    listing = market[listing_index]
    seller_id = listing.get("seller_id")
    price = listing["price"]
    buyer = data.get("users", {}).get(buyer_id)
    if not buyer:
        return HTMLResponse("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", status_code=404)
    if buyer.get("balance", 0) < price:
        return HTMLResponse("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", status_code=400)
    buyer["balance"] -= price
    seller = data.get("users", {}).get(seller_id)
    if seller:
        seller["balance"] = seller.get("balance", 0) + price

    token = listing["token"]
    token["bought_price"] = price
    token["seller_id"] = seller_id

    buyer.setdefault("tokens", []).append(token)
    market.pop(listing_index)
    save_data(data)
    return templates.TemplateResponse("profile.html", {"request": request, "user": buyer, "user_id": buyer_id})

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ ---
@app.post("/set_profile_token", response_class=HTMLResponse)
async def set_profile_token(request: Request, user_id: str = Form(...), token_index: int = Form(...)):
    cookie_user_id = request.cookies.get("user_id")
    if cookie_user_id != user_id:
        return HTMLResponse("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", status_code=403)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", status_code=404)
    tokens = user.get("tokens", [])
    if token_index < 1 or token_index > len(tokens):
        return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–æ–º–µ—Ä–∞", status_code=400)
    user["custom_number"] = tokens[token_index - 1]
    save_data(data)
    response = RedirectResponse(url=f"/profile/{user_id}", status_code=303)
    return response

@app.post("/remove_profile_token", response_class=HTMLResponse)
async def remove_profile_token(request: Request, user_id: str = Form(...)):
    cookie_user_id = request.cookies.get("user_id")
    if cookie_user_id != user_id:
        return HTMLResponse("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", status_code=403)
    data = load_data()
    user = data.get("users", {}).get(user_id)
    if not user:
        return HTMLResponse("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", status_code=404)
    if "custom_number" in user:
        del user["custom_number"]
        save_data(data)
    response = RedirectResponse(url=f"/profile/{user_id}", status_code=303)
    return response

# --------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä–∞ ---------------------
async def main():
    bot_task = asyncio.create_task(dp.start_polling(bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    web_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, web_task)

if __name__ == "__main__":
    asyncio.run(main())
